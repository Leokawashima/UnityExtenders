2023 5/12 最終更新

＜概要＞
ExMesh
階層
	Editorフォルダ
		ExGizmoEditor.cs
	ExGizmos_Icon.png
	ExGizmos.cs
	ExMesh.cs
	MeshMaterial.cs
	MeshSupport.cs

＜内容＞
・ExGizmoEditor.cs
	ExGizumosコンポーネントのEditorを拡張するスクリプト。
	自作usingステートメントを多用しているので、なんもないよりかはかなりスコープで内容が区切られていて、
	どこがどれを拡張しているかEditor拡張をやったことがない人でもわかりやすくしたつもり。
	初めて拡張をいじったにしては良い感じにラッピングできていると思う。
・ExGizmos_Icon.png
	ExGizumosのコンポーネントアイコン。

・ExGizmos.cs
	ExMeshクラスで定義した様々なメッシュをGizumoとして描画するコンポーネント。
	Gizumoで描画しているのでEditor上でしか描画されない。
	インスペクターでいじったメッシュをアセット化して保存することもできるので、ExMeshクラスがあっても使い方がわからん！
	という人はこれをいじくりまわして解決。
・ExMesh.cs
	大本命の様々なMesh生成関数を定義したライブラリ。
	///のコメントアウトで引数に入れるべきものは大体わかるようにしてあるので、
	興味がある人は中を覗いてオリジナルのメッシュ生成関数を作ってみて欲しい。
	そして使わせてほしい。
	今のところ法線の計算は自動計算任せなので、これをリアルなゲームでライティングしてとかはあんまりよろしくない。
	UVもセットしていないので柄付きのメッシュにもできない。
	上二つが致命的な問題点だが、簡単に言えば超簡単なゲームを作るくらいなら、
	気にならないくらいの見た目のメッシュを生成してくれる。
	本命としてはこれをMeshColliderに入れて使うこと。
	柔軟な当たり判定を実現できる。Meshコライダーを多用すると地獄みたいな負荷がかかる点には留意すること。
	余談として、家で液タブ片手にこの頂点の定義式がーとかこのインデックスとこのインデックスをーとか、
	考えるのに大体二週間とかでここまでの関数を実装制作したが、多分今ならチャットGPTを使えば汎用的な形なら、
	小一時間程度で実装できてしまう気がする。恐ろしや。
・MeshMaterial.cs
	メッシュ生成の基とするための構造体を定義したスクリプト。
	未実装部分も多いし、正直関数呼び出しなどの処理コスト増加の面から、
	ExMeshクラスでは絶対に使わないようにしているが、初めてでいろんな変数を宣言しなければいけない手間を考えると、
	必要な素材を取りまとめた構造体としてかなり機能すると思う。
	これをもっと改善して、解説したスクリプトを用意する予定。
	要するにまだあんま使い物にはならないよってこと。
・MeshSupport.cs
	Mesh生成をお助けする関数群をいろいろ用意したStaticクラス。
	結構使い勝手がいいが、上と同じように処理コスト増加の面からExMeshでは使っていない。
	だが、この関数群で色々やった方がコードが綺麗になるわよくわかんねー所全部やってくれるわで初めてなら重宝する。
	これもいずれ詳しく解説したスクリプトを用意する予定。